{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","App.js","actions.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","x","components_Card","key","SearchBox","searchField","searchChanged","aria-label","value","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","Header","App","onRequestRobots","_this$props","onSearchChanged","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","SearchBox_SearchBox","Scroll_Scroll","ErrorBoundry_ErrorBoundry","CardList_CardList","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a7f0fea1.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport const CardList = ({ robots }) => {\r\n  return robots.map(x => <Card key={x.id} id={x.id} name={x.name} email={x.email} />);\r\n};\r\n","import React from 'react';\r\n\r\nexport const SearchBox = ({ searchField, searchChanged }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Seach robots\"\r\n        value={searchField}\r\n        onChange={searchChanged}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const Scroll = props => {\r\n  return <div style={{ overflowY: 'scroll', border: '1px solid black', height: '910px' }}>{props.children}</div>;\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return <h1 className=\"f1\">RoboFriends</h1>;\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CardList } from './components/CardList';\r\nimport { SearchBox } from './components/SearchBox';\r\nimport './App.css';\r\nimport { Scroll } from './components/Scroll';\r\nimport ErrorBoundry from './components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from './actions';\r\nimport Header from './components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChanged: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChanged, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(x => {\r\n      return x.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChanged={onSearchChanged} />\r\n        {isPending && <h2>Loading...</h2>}\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING\r\n  });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n      })\r\n    )\r\n    .catch(error =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n      })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport registerServiceWorker from './registerServiceWorker.js';\r\n\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestRobots\r\n});\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}